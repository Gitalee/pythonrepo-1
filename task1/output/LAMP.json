[
    {
        "AWS::ElasticLoadBalancingV2::LoadBalancer": {
            "Subnets": {
                "Ref": "Subnets"
            }
        }
    },
    {
        "AWS::ElasticLoadBalancingV2::Listener": {
            "DefaultActions": [
                {
                    "Type": "forward",
                    "TargetGroupArn": {
                        "Ref": "ALBTargetGroup"
                    }
                }
            ],
            "LoadBalancerArn": {
                "Ref": "ApplicationLoadBalancer"
            },
            "Port": "80",
            "Protocol": "HTTP"
        }
    },
    {
        "AWS::ElasticLoadBalancingV2::TargetGroup": {
            "HealthCheckIntervalSeconds": 10,
            "HealthCheckTimeoutSeconds": 5,
            "HealthyThresholdCount": 2,
            "Port": 80,
            "Protocol": "HTTP",
            "UnhealthyThresholdCount": 5,
            "VpcId": {
                "Ref": "VpcId"
            },
            "TargetGroupAttributes": [
                {
                    "Key": "stickiness.enabled",
                    "Value": "true"
                },
                {
                    "Key": "stickiness.type",
                    "Value": "lb_cookie"
                },
                {
                    "Key": "stickiness.lb_cookie.duration_seconds",
                    "Value": "30"
                }
            ]
        }
    },
    {
        "AWS::AutoScaling::AutoScalingGroup": {
            "VPCZoneIdentifier": {
                "Ref": "Subnets"
            },
            "LaunchConfigurationName": {
                "Ref": "LaunchConfig"
            },
            "MinSize": "1",
            "MaxSize": "5",
            "DesiredCapacity": {
                "Ref": "WebServerCapacity"
            },
            "TargetGroupARNs": [
                {
                    "Ref": "ALBTargetGroup"
                }
            ]
        }
    },
    {
        "AWS::AutoScaling::LaunchConfiguration": {
            "ImageId": {
                "Fn::FindInMap": [
                    "AWSRegionArch2AMI",
                    {
                        "Ref": "AWS::Region"
                    },
                    {
                        "Fn::FindInMap": [
                            "AWSInstanceType2Arch",
                            {
                                "Ref": "InstanceType"
                            },
                            "Arch"
                        ]
                    }
                ]
            },
            "InstanceType": {
                "Ref": "InstanceType"
            },
            "SecurityGroups": [
                {
                    "Ref": "WebServerSecurityGroup"
                }
            ],
            "KeyName": {
                "Ref": "KeyName"
            },
            "UserData": {
                "Fn::Base64": {
                    "Fn::Join": [
                        "",
                        [
                            "#!/bin/bash -xe\n",
                            "yum update -y aws-cfn-bootstrap\n",
                            "# Install the files and packages from the metadata\n",
                            "/opt/aws/bin/cfn-init -v ",
                            "         --stack ",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "         --resource LaunchConfig ",
                            "         --region ",
                            {
                                "Ref": "AWS::Region"
                            },
                            "\n",
                            "# Signal the status from cfn-init\n",
                            "/opt/aws/bin/cfn-signal -e $? ",
                            "         --stack ",
                            {
                                "Ref": "AWS::StackName"
                            },
                            "         --resource WebServerGroup ",
                            "         --region ",
                            {
                                "Ref": "AWS::Region"
                            },
                            "\n"
                        ]
                    ]
                }
            }
        }
    },
    {
        "AWS::EC2::SecurityGroup": {
            "GroupDescription": "Enable HTTP access via port 80 locked down to the ELB and SSH access",
            "SecurityGroupIngress": [
                {
                    "IpProtocol": "tcp",
                    "FromPort": "80",
                    "ToPort": "80",
                    "SourceSecurityGroupId": {
                        "Fn::Select": [
                            0,
                            {
                                "Fn::GetAtt": [
                                    "ApplicationLoadBalancer",
                                    "SecurityGroups"
                                ]
                            }
                        ]
                    }
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "22",
                    "ToPort": "22",
                    "CidrIp": {
                        "Ref": "SSHLocation"
                    }
                }
            ],
            "VpcId": {
                "Ref": "VpcId"
            }
        }
    },
    {
        "AWS::EC2::SecurityGroup": {
            "GroupDescription": "Open database for access",
            "SecurityGroupIngress": [
                {
                    "IpProtocol": "tcp",
                    "FromPort": "3306",
                    "ToPort": "3306",
                    "SourceSecurityGroupId": {
                        "Ref": "WebServerSecurityGroup"
                    }
                }
            ],
            "VpcId": {
                "Ref": "VpcId"
            }
        }
    },
    {
        "AWS::RDS::DBInstance": {
            "Engine": "MySQL",
            "DBName": {
                "Ref": "DBName"
            },
            "MultiAZ": {
                "Ref": "MultiAZDatabase"
            },
            "MasterUsername": {
                "Ref": "DBUser"
            },
            "MasterUserPassword": {
                "Ref": "DBPassword"
            },
            "DBInstanceClass": {
                "Ref": "DBInstanceClass"
            },
            "AllocatedStorage": {
                "Ref": "DBAllocatedStorage"
            },
            "VPCSecurityGroups": [
                {
                    "Fn::GetAtt": [
                        "DBEC2SecurityGroup",
                        "GroupId"
                    ]
                }
            ]
        }
    }
]